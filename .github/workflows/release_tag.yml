name: Release Tag

# 실행 조건
on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

# 실행문
jobs:
  # build 라는 Naming
  build:
    # 실행 OS
    runs-on: ubuntu-latest
    # 단계별 실행
    steps:
      # Git에서 제공하는 action version
      - uses: actions/checkout@v2

      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0)
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Create New Tag
        id: create_new_tag
        # 기존 태그 형식: 1.240729.00
        run: |
          IFS='.' read -r -a parts <<< "$latest_tag"
          major=${parts[0]}
          minor=${parts[1]}
          patch=${parts[2]}
          new_patch=$((patch + 1))
          new_tag="$major.$minor.$(printf "%02d" $new_patch)"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
          git tag $new_tag
          git push origin $new_tag

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_new_tag.outputs.new_tag }}
          release_name: ${{ steps.create_new_tag.outputs.new_tag }}
    # steps:
    #   # Git에서 제공하는 action version
    #   - uses: actions/checkout@v2

    #   - name: 버전 정보 추출
    #     id: version_name
    #     # PR Title에서 버전 정보를 정규 표현식으로 추출 ex) 1.240725.01
    #     # env.VERSION으로 접근할 수 있게 $GITHUB_ENV로 저장
    #     run: |
    #       VERSION=$(echo '${{ github.event.head_commit.message }}' | egrep -o '[0-9]{1,3}\.[0-9]{1,6}\.[0-9]{1,2}')
    #       echo "VERSION=$VERSION" >> $GITHUB_ENV
    #       echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

    #   - name: Release 생성
    #     uses: actions/create-release@v1
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     with:
    #       tag_name: ${{ steps.version_name.outputs.VERSION }}
    #       release_name: ${{ steps.version_name.outputs.VERSION }}
