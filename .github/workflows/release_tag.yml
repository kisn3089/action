name: Release Tag

# 실행 조건
on:
  push:
    branches:
      - main

# 실행문
jobs:
  # build 라는 Naming
  fetch_tag:
    runs-on: ubuntu-latest
    steps:
      - name: Fetch all tags
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Fetch Tags
        run: git fetch --tags

  create_tag:
    needs: fetch_tag
    runs-on: ubuntu-latest
    outputs:
      newTag: ${{steps.create_new_tag.outputs.new_tag}}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get Latest Tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0)
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT
          echo "LATEST_TAG: $latest_tag"

      - name: Create New Tag
        id: create_new_tag
        run: |
          year=$(date +'%y')
          month=$(date +'%m')
          minor="${year}${month}"
          echo "Minor: $minor"
          IFS='.' read -r -a parts <<< "$latest_tag"
          major="${parts[0]}"
          latest_patch="${parts[2]}"
          echo "parts: ${parts[*]}"
          new_patch=$(printf "%02d" $((10#$latest_patch + 1)))
          echo "New Patch: $new_patch"
          echo "New Tag: $new_tag" 
          new_tag="$major.$minor.$new_patch"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
          git tag $new_tag
          git push origin $new_tag

  create_release:
    needs: create_tag
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Fetch full history to ensure all tags are available

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.create_tag.outputs.newTag }}
          release_name: ${{ needs.create_tag.outputs.newTag }}
  # build:
  #   # 실행 OS
  #   runs-on: ubuntu-latest
  #   # 단계별 실행
  #   steps:
  #     # Git에서 제공하는 action version
  #     - uses: actions/checkout@v2

  #     - name: Fetch all tags
  #       run: git fetch --tags

  #     - name: Get Latest Tag
  #       id: get_latest_tag
  #       run: |
  #         latest_tag=$(git describe --tags --abbrev=0)
  #         echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

  #     - name: Create New Tag
  #       id: create_new_tag
  #       # 기존 태그 형식: 1.240729.00
  #       run: |
  #         year=$(date +'%y')
  #         month=$(date +'%m')
  #         minor="${year}${month}"
  #         IFS='.' read -r -a parts <<< "$latest_tag"
  #         major="${parts[0]}"
  #         latest_patch=${parts[2]}
  #         new_patch=$(printf "%02d" $((10#$latest_patch + 1)))
  #         new_tag="$major.$minor.$new_patch"
  #         echo "new_tag=$new_tag" >> $GITHUB_OUTPUT
  #         git tag $new_tag
  #         git push origin $new_tag

  #     - name: Create Release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ steps.create_new_tag.outputs.new_tag }}
  #         release_name: ${{ steps.create_new_tag.outputs.new_tag }}
# permissions:
#   contents: write
#   pull-requests: write
# steps:
#   # Git에서 제공하는 action version
#   - uses: actions/checkout@v2

#   - name: 버전 정보 추출
#     id: version_name
#     # PR Title에서 버전 정보를 정규 표현식으로 추출 ex) 1.240725.01
#     # env.VERSION으로 접근할 수 있게 $GITHUB_ENV로 저장
#     run: |
#       VERSION=$(echo '${{ github.event.head_commit.message }}' | egrep -o '[0-9]{1,3}\.[0-9]{1,6}\.[0-9]{1,2}')
#       echo "VERSION=$VERSION" >> $GITHUB_ENV
#       echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

#   - name: Release 생성
#     uses: actions/create-release@v1
#     env:
#       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#     with:
#       tag_name: ${{ steps.version_name.outputs.VERSION }}
#       release_name: ${{ steps.version_name.outputs.VERSION }}
